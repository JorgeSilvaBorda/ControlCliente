-- PROBLEMA DE LECTURA DE ORIGEN REMARCADOR CORREGIDO EN SP:
DROP PROCEDURE IF EXISTS SP_GET_ORIGEN_REMARCADORES_FECHAS;

DELIMITER $$
CREATE DEFINER=`root`@`_gateway` PROCEDURE `SP_GET_ORIGEN_REMARCADORES_FECHAS`(
	IN _FECHAINI VARCHAR(10),
    IN _FECHAFIN VARCHAR(10)
)
BEGIN
SELECT 
	A.ORIGEN,
    A.EQUIPO_ID
FROM(
	SELECT
		'circutorcvmC10' AS ORIGEN,
		EQUIPO_ID
	FROM
		circutorcvmC10 
	WHERE
		FECHA BETWEEN _FECHAINI AND _FECHAFIN
	GROUP BY
		EQUIPO_ID
	UNION ALL
	SELECT
		'schneiderPM5300' AS ORIGEN,
		EQUIPO_ID
	FROM
		schneiderPM5300
	WHERE
		FECHA BETWEEN _FECHAINI AND _FECHAFIN
	GROUP BY
		EQUIPO_ID
	UNION ALL
	SELECT
		'schneiderPM710' AS ORIGEN,
		EQUIPO_ID
	FROM
		schneiderPM710 A
	WHERE
		FECHA BETWEEN _FECHAINI AND _FECHAFIN
	GROUP BY
		EQUIPO_ID) A INNER JOIN REMARCADOR B 
	ON A.EQUIPO_ID = B.NUMREMARCADOR INNER JOIN CLIREMPAR C
    ON B.IDREMARCADOR = C.IDREMARCADOR INNER JOIN (
			-- UPDATE 20200205 SE AGREGA FILTRO PARA QUE TRAIGA EN BASE A NUEVOS CAMPOS DE CLIREMPAR (FECHAASIGNACION, TIPO = 'ASIGNACION')
				SELECT
					NUM,
                    ULTASIGNACION,
                    IDREMARCADOR,
                    IDCLIENTE,
                    IDUSUARIO,
                    TIPO
				FROM(
					SELECT
						ROW_NUMBER() OVER (PARTITION BY IDREMARCADOR ORDER BY MAX(FECHAASIGNACION) DESC) NUM,
						MAX(FECHAASIGNACION) ULTASIGNACION,
						IDREMARCADOR,
						IDCLIENTE,
						IDUSUARIO,
						TIPO
					FROM
						CLIREMPAR
					GROUP BY
						IDREMARCADOR,
						IDCLIENTE,
						IDUSUARIO,
						TIPO
					ORDER BY
						IDREMARCADOR ASC) REF
            WHERE
				REF.NUM = 1 ) D
			ON C.IDREMARCADOR = D.IDREMARCADOR
				AND C.IDCLIENTE = D.IDCLIENTE
                AND D.ULTASIGNACION = C.FECHAASIGNACION
	WHERE
		D.TIPO = 'ASIGNACION'
ORDER BY
	A.EQUIPO_ID ASC;
END$$
DELIMITER ;

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- TABLA PARA ALMACENAR CONTINUIDAD Y RESOLVER PROBLEMA DE LA PERFORMANCE -------------------------------------------------------------------------------------------------

CREATE TABLE `CONTINUIDAD` (
  `ORIGEN` varchar(500) NOT NULL,
  `TIMESTAMP` timestamp NOT NULL,
  `FECHA` date DEFAULT NULL,
  `ANIO` int NOT NULL,
  `MES` int NOT NULL,
  `DIA` int NOT NULL,
  `NUMREMARCADOR` int NOT NULL,
  `IDREMARCADOR` int DEFAULT NULL,
  `LECTURAREAL` decimal(24,12) DEFAULT NULL,
  `ULTIMOMAXIMO` decimal(24,12) DEFAULT NULL,
  `LECTURAPROYECTADA` decimal(24,12) DEFAULT NULL,
  `DELTA` decimal(24,12) DEFAULT NULL,
  `POTENCIA` decimal(24,12) DEFAULT NULL,
  `EXISTE` int DEFAULT NULL,
  KEY `IDX_CONTINUIDAD_ORIGEN` (`ORIGEN`),
  KEY `IDX_CONTINUIDAD_FECHA` (`FECHA`),
  KEY `IDX_CONTINUIDAD_ANIO` (`ANIO`),
  KEY `IDX_CONTINUIDAD_MES` (`MES`),
  KEY `IDX_CONTINUIDAD_DIA` (`DIA`),
  KEY `IDX_CONTINUIDAD_NUMREMARCADOR` (`NUMREMARCADOR`)
) ENGINE=InnoDB;


-- TRIGGER CIRCUTOR PARA ALMACENAR LA CONTINUIDAD ------------------------------------------------------------------------------------------------------------------------

DROP TRIGGER IF EXISTS TRG_INSERT_CONTINUIDAD_CIRCUTOR;

DELIMITER $$
CREATE TRIGGER TRG_INSERT_CONTINUIDAD_CIRCUTOR
AFTER INSERT ON circutorcvmC10
FOR EACH ROW
BEGIN    
	SET @pEXISTE := 0;
    SET @pULTIMOMAXIMO := 0.0;
    SET @pPOTENCIA := 0.0;
    SET @pLECTURAREAL := 0.0;
    SET @pDELTA := 0.0;
    SET @pLECTURAPROYECTADAANTERIOR := 0.0;
    SET @pLECTURAPROYECTADA := 0.0;
    
	-- OBTENER VALORES CRUDOS DE ENTRADA
    SET @pITEM49 := NEW.ITEM49;
    SET @pITEM50 := NEW.ITEM50;
    SET @pITEM95 := NEW.ITEM95;
    SET @pITEM96 := NEW.ITEM96;
    
    SET @pTIMESTAMP := NEW.TIMESTAMP;
    SET @pANIO := NEW.ANIO;
    SET @pMES := NEW.MES;
    SET @pDIA := NEW.DIA;
    SET @pNUMREMARCADOR := NEW.EQUIPO_ID;
    SET @pIDREMARCADOR := (SELECT IDREMARCADOR FROM REMARCADOR WHERE NUMREMARCADOR = @pNUMREMARCADOR);
    
    SET @pORIGEN := 'circutorcvmC10';
    
    -- CALCULAR CONSUMO
    IF (TRIM(@pITEM95) != '' AND TRIM(@pITEM96) != '') THEN -- SI ES LECTURA VÁLIDA, SE GUARDA
		IF (@pITEM96 >= 0) THEN
			SET @pLECTURAREAL := (@pITEM95 * 65536) + @pITEM96;
		END IF;
		
		IF (@pITEM96 < 0) THEN
			SET @pLECTURAREAL := (@pITEM95 * 65536) + (@pITEM96 + 65536);
		END IF;
        
        SELECT 
			CASE WHEN LECTURAREAL IS NULL THEN 0.0 ELSE LECTURAREAL END
		INTO
			@pULTIMOMAXIMO
		FROM
			CONTINUIDAD
		WHERE
			NUMREMARCADOR = @pNUMREMARCADOR
            AND TIMESTAMP < @pTIMESTAMP
		ORDER BY 
			TIMESTAMP DESC
		LIMIT 1;
        
        IF @pULTIMOMAXIMO IS NULL THEN
			SET @pULTIMOMAXIMO := 0.0;
		END IF;
        
        SET @pEXISTE := 1;
        
	ELSE -- SI NO ES LECTURA VÁLIDA, SE GUARDA LA ANTERIOR
		-- OBTENER LA ÚLTIMA FECHA ANTERIOR DE REGISTRO
        SELECT 
			CASE WHEN LECTURAREAL IS NULL THEN 0.0 ELSE LECTURAREAL END
		INTO
			@pLECTURAREAL
		FROM
			CONTINUIDAD
		WHERE
			NUMREMARCADOR = @pNUMREMARCADOR
            AND TIMESTAMP < @pTIMESTAMP
		ORDER BY 
			TIMESTAMP DESC
		LIMIT 1;
        IF @pLECTURAREAL IS NULL THEN
			SET @pLECTURAREAL := 0.0;
		END IF;
        SET @pULTIMOMAXIMO := @pLECTURAREAL;
			
    END IF;
    
	
    -- CALCULAR POTENCIA
    IF (TRIM(@pITEM49) != '' AND TRIM(@pITEM50) != '') THEN -- SI ES LECTURA VÁLIDA, SE GUARDA
		IF (@pITEM50 >= 0) THEN
			SET @pPOTENCIA := ((@pITEM49 * 65536) + @pITEM50) / 1000;
		END IF;
		
		IF (@pITEM50 < 0) THEN
			SET @pPOTENCIA := ((@pITEM49 * 65536) + (@pITEM50 + 65536)) / 1000;
		END IF;
	END IF;
    
    -- CALCULOS DE CONTINUIDAD
    -- DELTA
    IF (@pULTIMOMAXIMO <= @pLECTURAREAL) THEN
		SET @pDELTA := (@pLECTURAREAL - @pULTIMOMAXIMO);
	ELSE
		SET @pDELTA := (@pULTIMOMAXIMO - @pLECTURAREAL) - @pULTIMOMAXIMO;
    END IF;
    
    -- LECTURA PROYECTADA
    SET @pLECTURAPROYECTADAANTERIOR := (SELECT CASE WHEN LECTURAPROYECTADA IS NULL THEN 0.0 ELSE LECTURAPROYECTADA END FROM CONTINUIDAD WHERE NUMREMARCADOR = @pNUMREMARCADOR AND TIMESTAMP < @pTIMESTAMP ORDER BY TIMESTAMP DESC LIMIT 1);
    IF @pLECTURAPROYECTADAANTERIOR IS NULL THEN
		SET @pLECTURAPROYECTADAANTERIOR = 0.0;
    END IF;
    SET @pLECTURAPROYECTADA := @pLECTURAPROYECTADAANTERIOR + @pDELTA;
    
    INSERT INTO
		CONTINUIDAD(
			ORIGEN,
			TIMESTAMP,
			FECHA,
			ANIO,
			MES,
			DIA,
			NUMREMARCADOR,
			IDREMARCADOR,
			LECTURAREAL,
			ULTIMOMAXIMO,
			LECTURAPROYECTADA,
			DELTA ,
			POTENCIA,
			EXISTE
		)VALUES(
			@pORIGEN,
			@pTIMESTAMP,
            DATE(@pTIMESTAMP),
            @pANIO,
            @pMES,
            @pDIA,
            @pNUMREMARCADOR,
            @pIDREMARCADOR,
            @pLECTURAREAL,
            @pULTIMOMAXIMO,
            @pLECTURAPROYECTADA,
            @pDELTA,
            @pPOTENCIA,
            @pEXISTE
		);
    
END$$
DELIMITER ;

-- -------------------------------------------------------------------------------------------------------------------------------------------------------------

-- TRIGGER SCHNEIDER PM710 PARA ALMACENAR LA CONTINUIDAD ------------------------------------------------------------------------------------------------------------------------
DROP TRIGGER IF EXISTS TRG_INSERT_CONTINUIDAD_PM710;
DELIMITER $$

CREATE TRIGGER TRG_INSERT_CONTINUIDAD_PM710
AFTER INSERT
ON schneiderPM710 FOR EACH ROW
BEGIN    
	SET @pEXISTE := 0;
    SET @pULTIMOMAXIMO := 0.0;
    SET @pPOTENCIA := 0.0;
    SET @pLECTURAREAL := 0.0;
    SET @pDELTA := 0.0;
    SET @pLECTURAPROYECTADAANTERIOR := 0.0;
    SET @pLECTURAPROYECTADA := 0.0;
    
	-- OBTENER VALORES CRUDOS DE ENTRADA
    SET @pITEM1 := NEW.ITEM1;
    SET @pITEM2 := NEW.ITEM2;
    SET @pITEM7 := NEW.ITEM7;
    SET @pITEM109 := NEW.ITEM109;
    SET @pITEM108 := NEW.ITEM108;
    
    SET @pTIMESTAMP := NEW.TIMESTAMP;
    SET @pANIO := NEW.ANIO;
    SET @pMES := NEW.MES;
    SET @pDIA := NEW.DIA;
    SET @pNUMREMARCADOR := NEW.EQUIPO_ID;
    SET @pIDREMARCADOR := (SELECT IDREMARCADOR FROM REMARCADOR WHERE NUMREMARCADOR = @pNUMREMARCADOR);
    
    SET @pORIGEN := 'schneiderPM710';
    
    -- CALCULAR CONSUMO
    IF (TRIM(@pITEM1) != '' AND TRIM(@pITEM2) != '' AND TRIM(@pITEM109) != '') THEN -- SI ES LECTURA VÁLIDA, SE GUARDA
		IF (@pITEM2 = 0) THEN
			SET @pLECTURAREAL := ((@pITEM1 * 65536) + (@pITEM2)) * POWER(10, @pITEM109);
		END IF;
		
		IF (@pITEM2 < 0) THEN
			SET @pLECTURAREAL := ((@pITEM1 * 65536) + (@pITEM2 + 65536)) * POWER(10, @pITEM109);
		END IF;
        
        IF (@pITEM2 > 0) THEN
			SET @pLECTURAREAL := ((@pITEM1 * 65536) + (@pITEM2)) * POWER(10, @pITEM109);
		END IF;
        
        SELECT 
			CASE WHEN LECTURAREAL IS NULL THEN 0.0 ELSE LECTURAREAL END
		INTO
			@pULTIMOMAXIMO
		FROM
			CONTINUIDAD
		WHERE
			NUMREMARCADOR = @pNUMREMARCADOR
            AND TIMESTAMP < @pTIMESTAMP
		ORDER BY 
			TIMESTAMP DESC
		LIMIT 1;
        
        IF @pULTIMOMAXIMO IS NULL THEN
			SET @pULTIMOMAXIMO := 0.0;
		END IF;
        
        SET @pEXISTE := 1;
        
	ELSE -- SI NO ES LECTURA VÁLIDA, SE GUARDA LA ANTERIOR
		-- OBTENER LA ÚLTIMA FECHA ANTERIOR DE REGISTRO
        SELECT 
			CASE WHEN LECTURAREAL IS NULL THEN 0.0 ELSE LECTURAREAL END
		INTO
			@pLECTURAREAL
		FROM
			CONTINUIDAD
		WHERE
			NUMREMARCADOR = @pNUMREMARCADOR
            AND TIMESTAMP < @pTIMESTAMP
		ORDER BY 
			TIMESTAMP DESC
		LIMIT 1;
        IF @pLECTURAREAL IS NULL THEN
			SET @pLECTURAREAL := 0.0;
		END IF;
        SET @pULTIMOMAXIMO := @pLECTURAREAL;
			
    END IF;
    
	
    -- CALCULAR POTENCIA
    IF (TRIM(@pITEM7) != '' AND TRIM(@pITEM108) != '') THEN -- SI ES LECTURA VÁLIDA, SE GUARDA
		SET @pPOTENCIA := (@pITEM7) * POWER(10, @pITEM108);
	END IF;
    
    -- CALCULOS DE CONTINUIDAD
    -- DELTA
    IF (@pULTIMOMAXIMO <= @pLECTURAREAL) THEN
		SET @pDELTA := (@pLECTURAREAL - @pULTIMOMAXIMO);
	ELSE
		SET @pDELTA := (@pULTIMOMAXIMO - @pLECTURAREAL) - @pULTIMOMAXIMO;
    END IF;
    
    -- LECTURA PROYECTADA
    SET @pLECTURAPROYECTADAANTERIOR := (SELECT CASE WHEN LECTURAPROYECTADA IS NULL THEN 0.0 ELSE LECTURAPROYECTADA END FROM CONTINUIDAD WHERE NUMREMARCADOR = @pNUMREMARCADOR AND TIMESTAMP < @pTIMESTAMP ORDER BY TIMESTAMP DESC LIMIT 1);
    IF @pLECTURAPROYECTADAANTERIOR IS NULL THEN
		SET @pLECTURAPROYECTADAANTERIOR = 0.0;
    END IF;
    
    SET @pLECTURAPROYECTADA := @pLECTURAPROYECTADAANTERIOR + @pDELTA;
    
    INSERT INTO
		CONTINUIDAD(
			ORIGEN,
			TIMESTAMP,
			FECHA,
			ANIO,
			MES,
			DIA,
			NUMREMARCADOR,
			IDREMARCADOR,
			LECTURAREAL,
			ULTIMOMAXIMO,
			LECTURAPROYECTADA,
			DELTA ,
			POTENCIA,
			EXISTE
		)VALUES(
			@pORIGEN,
			@pTIMESTAMP,
            DATE(@pTIMESTAMP),
            @pANIO,
            @pMES,
            @pDIA,
            @pNUMREMARCADOR,
            @pIDREMARCADOR,
            @pLECTURAREAL,
            @pULTIMOMAXIMO,
            @pLECTURAPROYECTADA,
            @pDELTA,
            @pPOTENCIA,
            @pEXISTE
		);
    
END$$
DELIMITER ;

-- -------------------------------------------------------------------------------------------------------------------------------------------------------------

-- TRIGGER SCHNEIDER PM3500 PARA ALMACENAR LA CONTINUIDAD ------------------------------------------------------------------------------------------------------------------------
DROP TRIGGER IF EXISTS TRG_INSERT_CONTINUIDAD_PM5300;
DELIMITER $$

CREATE TRIGGER TRG_INSERT_CONTINUIDAD_PM5300
AFTER INSERT
ON schneiderPM5300 FOR EACH ROW
BEGIN    
	SET @pEXISTE := 0;
    SET @pULTIMOMAXIMO := 0.0;
    SET @pPOTENCIA := 0.0;
    SET @pLECTURAREAL := 0.0;
    SET @pDELTA := 0.0;
    SET @pLECTURAPROYECTADAANTERIOR := 0.0;
    SET @pLECTURAPROYECTADA := 0.0;
    
	-- OBTENER VALORES CRUDOS DE ENTRADA
    SET @pITEM1 := NEW.ITEM1;
    SET @pITEM43 := NEW.ITEM43;
    
    SET @pTIMESTAMP := NEW.TIMESTAMP;
    SET @pANIO := NEW.ANIO;
    SET @pMES := NEW.MES;
    SET @pDIA := NEW.DIA;
    SET @pNUMREMARCADOR := NEW.EQUIPO_ID;
    SET @pIDREMARCADOR := (SELECT IDREMARCADOR FROM REMARCADOR WHERE NUMREMARCADOR = @pNUMREMARCADOR);
    
    SET @pORIGEN := 'schneiderPM5300';
    
    -- CALCULAR CONSUMO
    IF (TRIM(@pITEM1) != '5.8774717541114E-39') THEN -- SI ES LECTURA VÁLIDA, SE GUARDA
		SET @pLECTURAREAL := @pITEM1;
        
        SELECT 
			CASE WHEN LECTURAREAL IS NULL THEN 0.0 ELSE LECTURAREAL END
		INTO
			@pULTIMOMAXIMO
		FROM
			CONTINUIDAD
		WHERE
			NUMREMARCADOR = @pNUMREMARCADOR
            AND TIMESTAMP < @pTIMESTAMP
		ORDER BY 
			TIMESTAMP DESC
		LIMIT 1;
        
        IF @pULTIMOMAXIMO IS NULL THEN
			SET @pULTIMOMAXIMO := 0.0;
		END IF;
        
        SET @pEXISTE := 1;
        
	ELSE -- SI NO ES LECTURA VÁLIDA, SE GUARDA LA ANTERIOR
		-- OBTENER LA ÚLTIMA FECHA ANTERIOR DE REGISTRO
        SELECT 
			CASE WHEN LECTURAREAL IS NULL THEN 0.0 ELSE LECTURAREAL END
		INTO
			@pLECTURAREAL
		FROM
			CONTINUIDAD
		WHERE
			NUMREMARCADOR = @pNUMREMARCADOR
            AND TIMESTAMP < @pTIMESTAMP
		ORDER BY 
			TIMESTAMP DESC
		LIMIT 1;
        IF @pLECTURAREAL IS NULL THEN
			SET @pLECTURAREAL := 0.0;
		END IF;
        SET @pULTIMOMAXIMO := @pLECTURAREAL;
			
    END IF;
    
	
    -- CALCULAR POTENCIA
    IF (TRIM(@pITEM43) != '5.8774717541114E-39' ) THEN -- SI ES LECTURA VÁLIDA, SE GUARDA
		SET @pPOTENCIA := @pITEM43;
	END IF;
    
    -- CALCULOS DE CONTINUIDAD
    -- DELTA
    IF (@pULTIMOMAXIMO <= @pLECTURAREAL) THEN
		SET @pDELTA := (@pLECTURAREAL - @pULTIMOMAXIMO);
	ELSE
		SET @pDELTA := (@pULTIMOMAXIMO - @pLECTURAREAL) - @pULTIMOMAXIMO;
    END IF;
    
    -- LECTURA PROYECTADA
    SET @pLECTURAPROYECTADAANTERIOR := (SELECT CASE WHEN LECTURAPROYECTADA IS NULL THEN 0.0 ELSE LECTURAPROYECTADA END FROM CONTINUIDAD WHERE NUMREMARCADOR = @pNUMREMARCADOR AND TIMESTAMP < @pTIMESTAMP ORDER BY TIMESTAMP DESC LIMIT 1);
    IF @pLECTURAPROYECTADAANTERIOR IS NULL THEN
		SET @pLECTURAPROYECTADAANTERIOR = 0.0;
    END IF;
    SET @pLECTURAPROYECTADA := @pLECTURAPROYECTADAANTERIOR + @pDELTA;
    
    INSERT INTO
		CONTINUIDAD(
			ORIGEN,
			TIMESTAMP,
			FECHA,
			ANIO,
			MES,
			DIA,
			NUMREMARCADOR,
			IDREMARCADOR,
			LECTURAREAL,
			ULTIMOMAXIMO,
			LECTURAPROYECTADA,
			DELTA ,
			POTENCIA,
			EXISTE
		)VALUES(
			@pORIGEN,
			@pTIMESTAMP,
            DATE(@pTIMESTAMP),
            @pANIO,
            @pMES,
            @pDIA,
            @pNUMREMARCADOR,
            @pIDREMARCADOR,
            @pLECTURAREAL,
            @pULTIMOMAXIMO,
            @pLECTURAPROYECTADA,
            @pDELTA,
            @pPOTENCIA,
            @pEXISTE
		);
    
END$$
DELIMITER ;
